{"ast":null,"code":"import _asyncToGenerator from \"/Users/bhawanabenda/javaProject/Angular/loanProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServiceCallsService {\n  constructor(http) {\n    this.http = http;\n    /* ----------------    All service calls will be here      ---------------- */\n\n    this.serviceUrl = \"http://localhost:8080/apis/application\";\n    this.applicationUrl = \"http://localhost:8080/apis/application\";\n    this.Users = {};\n    this.responseUser = false;\n    this.responsePassword = \"null\";\n    this.responseBanker = false;\n    this.responseBankerPassword = \"null\";\n  }\n\n  getApplications() {\n    return this.http.get(this.serviceUrl);\n  }\n\n  getApplication(id) {\n    return this.http.get(this.serviceUrl + \"/\" + id);\n  }\n\n  saveApplication(application) {\n    return this.http.post(this.applicationUrl, application).pipe(map(res => {\n      return res.json();\n    }, err => {\n      console.error(err);\n    }));\n  }\n\n  checkUsername(username) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /*this.http.get(\"http://localhost:8080/apis/users/usernameExists/\"+username).subscribe((res:any)=>{\n           console.log(\"Response\");\n           console.log(res);\n           console.log(username);\n           this.responseUser = Boolean(res.value['usernameExists']);\n           console.log(this.responseUser);\n          });\n         return this.responseUser;\n          */\n      console.log(username); //console.log(this.http.get(\"http://localhost:8080/apis/users/usernameExists/\"+username))\n\n      return yield _this.http.get(\"http://localhost:8080/apis/users/usernameExists\" + \"/\" + username).toPromise().then(res => {\n        _this.responseUser = res['usernameExists'];\n        console.log(_this.responseUser);\n        console.log(res);\n      });\n    })();\n  }\n\n  checkUserPassword(password, userName) {\n    this.http.get(\"http://localhost:8080/apis/users/username/\" + userName).subscribe(res => {\n      this.responsePassword = String(res.customer.password);\n    });\n    return this.responsePassword;\n  }\n\n  checkBanker(username) {\n    this.http.get(\"http://localhost:8080/apis/admin/usernameExists/\" + username).subscribe(res => {\n      this.responseBanker = Boolean(res.usernameExists);\n    });\n    return this.responseBanker;\n  }\n\n  checkBankerPassword(password, userName) {\n    this.http.get(\"http://localhost:8080/apis/admin/\" + userName).subscribe(res => {\n      this.responseBankerPassword = String(res.banker.password);\n    });\n    return this.responseBankerPassword;\n  }\n  /*\n    public  saveUser(User:any){\n      console.log(\"POST CALL\")\n      console.log(User)\n      return  this.http.post(\"http://localhost:8080/apis/users\",User);\n    }\n    */\n\n\n  saveUser(User) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n    this.http.post(\"http://localhost:8080/apis/users\", User, httpOptions).toPromise();\n  }\n\n  saveBaker(User) {}\n\n}\n\nServiceCallsService.ɵfac = function ServiceCallsService_Factory(t) {\n  return new (t || ServiceCallsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nServiceCallsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceCallsService,\n  factory: ServiceCallsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/bhawanabenda/javaProject/Angular/loanProject/src/app/services/service-calls.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceCallsService {\n\n  constructor(private http: HttpClient) { }\n  /* ----------------    All service calls will be here      ---------------- */\n  serviceUrl:string=\"http://localhost:8080/apis/application\";\n  applicationUrl:string=\"http://localhost:8080/apis/application\";\n  Users={}\n  public responseUser = false;\n  public responsePassword =\"null\";\n  public responseBanker = false;\n  public responseBankerPassword =\"null\";\n\n\n  public getApplications() {\n    return this.http.get(this.serviceUrl);\n  }\n\n  public getApplication(id:number):any{\n    return this.http.get(this.serviceUrl+\"/\"+id);\n  }\n\n  public saveApplication(application:any){\n      return this.http.post(this.applicationUrl,application).pipe(\n        map((res:any)=>{\n          return res.json();\n        },(err: any)=>{\n          console.error(err);\n        })\n      );\n  }\n\n public async checkUsername(username:String):Promise<any>{\n\n  /*this.http.get(\"http://localhost:8080/apis/users/usernameExists/\"+username).subscribe((res:any)=>{\n       console.log(\"Response\");\n       console.log(res);\n       console.log(username);\n       this.responseUser = Boolean(res.value['usernameExists']); \n       console.log(this.responseUser);\n      });\n     return this.responseUser;\n      */\n     console.log(username)\n     //console.log(this.http.get(\"http://localhost:8080/apis/users/usernameExists/\"+username))\n    return   await this.http.get(\"http://localhost:8080/apis/users/usernameExists\"+\"/\"+username)\n      .toPromise()\n      .then((res:any)=>{\n        this.responseUser = res['usernameExists']\n        console.log(this.responseUser)\n        console.log(res);\n      });\n  }\n\n\n\n  public checkUserPassword(password:String,userName:String):any{\n    this.http.get(\"http://localhost:8080/apis/users/username/\"+userName).subscribe((res:any)=>{\n        this.responsePassword = String(res.customer.password);\n    });\n    return this.responsePassword\n  }\n\n  public checkBanker(username:String):any{\n    this.http.get(\"http://localhost:8080/apis/admin/usernameExists/\"+username).subscribe((res:any)=>{\n      this.responseBanker = Boolean(res.usernameExists);\n      });\n      return this.responseBanker;\n  }\n\n  public checkBankerPassword(password:String,userName:String):any{\n    this.http.get(\"http://localhost:8080/apis/admin/\"+userName).subscribe((res:any)=>{\n      this.responseBankerPassword = String(res.banker.password);\n    });\n    return this.responseBankerPassword;\n  }\n/*\n  public  saveUser(User:any){\n    console.log(\"POST CALL\")\n    console.log(User)\n    return  this.http.post(\"http://localhost:8080/apis/users\",User);\n  }\n  */\n  public saveUser(User:any){\n    const httpOptions = {\n      headers: new HttpHeaders({'Content-type':'application/json'})\n    }\n      this.http.post(\"http://localhost:8080/apis/users\", User,httpOptions).toPromise();\n    }\n\n  public saveBaker(User:any){\n\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}