{"ast":null,"code":"import _asyncToGenerator from \"/Users/bhawanabenda/javaProject/Angular/loanProject/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServiceCallsService {\n  constructor(http) {\n    this.http = http;\n    /* ----------------    All service calls will be here      ---------------- */\n\n    this.serviceUrl = \"http://localhost:8080/apis/application\";\n    this.applicationUrl = \"http://localhost:8080/apis/application\";\n    this.Users = {};\n    this.response = {\n      check: Boolean\n    };\n  }\n\n  getApplications() {\n    return this.http.get(this.serviceUrl);\n  }\n\n  getApplication(id) {\n    return this.http.get(this.serviceUrl + \"/\" + id);\n  }\n\n  saveApplication(application) {\n    return this.http.post(this.applicationUrl, application).pipe(map(res => {\n      return res.json();\n    }, err => {\n      console.error(err);\n    }));\n  }\n\n  checkUsername(username) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(username);\n      return yield _this.http.get(\"http://localhost:8080/apis/users/usernameExists\" + \"/\" + username).toPromise().then(res => {\n        console.log(res);\n        return JSON.stringify(res['usernameExists']);\n      });\n    })();\n  }\n\n  checkBanker(username) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this2.http.get(\"http://localhost:8080/apis/admin/usernameExists/\" + username).toPromise().then(res => {\n        console.log(res);\n      });\n    })();\n  }\n\n  checkUserPassword(password, userName) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this3.http.get(\"http://localhost:8080/apis/users/username/\" + userName).toPromise().then(res => {\n        console.log(res);\n        _this3.userid = res.customer['customerId'];\n        return JSON.stringify(res.customer['password']);\n      });\n    })();\n  }\n\n  checkBankerPassword(password, userName) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this4.http.get(\"http://localhost:8080/apis/admin/\" + userName).toPromise().then(res => {\n        console.log(res);\n        return JSON.stringify(res.banker['password']);\n      });\n    })();\n  }\n  /*\n    public  saveUser(User:any){\n      console.log(\"POST CALL\")\n      console.log(User)\n      return  this.http.post(\"http://localhost:8080/apis/users\",User);\n    }\n    */\n\n\n  saveUser(User) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n    this.http.post(\"http://localhost:8080/apis/users\", User, httpOptions).toPromise().then(res => {\n      this.customerIdResponse = res.customer['customerId'];\n      this.addressIdResponse = res.customer['addressId'];\n      this.firstName = res.customer['firstName'];\n      this.lastName = res.customer['lastName'];\n      this.dateOfBirth = res.customer['dateOfBirth'];\n      this.maritalStatus = res.customer['maritalStatus'];\n      this.ssnNumber = res.customer['ssnNumber'];\n    });\n  }\n\n  saveBanker(User) {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-type': 'application/json'\n      })\n    };\n    this.http.post(\"http://localhost:8080/apis/admin\", User, httpOptions).toPromise();\n  }\n  /* public async submitApplication(ApplicationUser:any,AddressUser:any,loanUser:any){\n     const httpOptions={\n       headers:new HttpHeaders({\n         'Content-type':'application/json'\n       })\n     }\n     //this.http.post(\"http://localhost:8080/apis/application\",loanUser,httpOptions).toPromise();\n     await this.http.post(\"http://localhost:8080/apis/address\",AddressUser,httpOptions).toPromise().then((res:any)=>{\n       \n     });\n     this.http.post(\"http://localhost:8080/apis/users\",ApplicationUser,httpOptions).toPromise();\n  } */\n  //with customer id\n\n\n  userApplications(id) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return yield _this5.http.get(\"http://localhost:8080/apis/application/userId/\" + id).toPromise().then(res => {\n        return res.applications;\n      });\n    })();\n  }\n\n}\n\nServiceCallsService.ɵfac = function ServiceCallsService_Factory(t) {\n  return new (t || ServiceCallsService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nServiceCallsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServiceCallsService,\n  factory: ServiceCallsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/bhawanabenda/javaProject/Angular/loanProject/src/app/services/service-calls.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http'\nimport { map } from 'rxjs/operators';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServiceCallsService {\n\n  constructor(private http: HttpClient) { }\n  /* ----------------    All service calls will be here      ---------------- */\n  serviceUrl:string=\"http://localhost:8080/apis/application\";\n  applicationUrl:string=\"http://localhost:8080/apis/application\";\n  Users={}\n  userid:any;\n  response = {\n    check:Boolean\n  }\n\n  addressIdResponse:any;\n  customerIdResponse:any;\n  firstName:any;\n  lastName:any;\n  dateOfBirth:any;\n  maritalStatus:any;\n  ssnNumber:any;\n\n  public getApplications() {\n    return this.http.get(this.serviceUrl);\n  }\n\n  public getApplication(id:number):any{\n    return this.http.get(this.serviceUrl+\"/\"+id);\n  }\n\n  public saveApplication(application:any){\n      return this.http.post(this.applicationUrl,application).pipe(\n        map((res:any)=>{\n          return res.json();\n        },(err: any)=>{\n          console.error(err);\n        })\n      );\n  }\n\n public async checkUsername(username:String):Promise<String>{\n     console.log(username)\n     return await this.http.get(\"http://localhost:8080/apis/users/usernameExists\"+\"/\"+username).toPromise().then((res:any)=>{\n        console.log(res);\n        return JSON.stringify(res['usernameExists']);\n      });\n  }\n  public async checkBanker(username:String):Promise<any>{\n    return await this.http.get(\"http://localhost:8080/apis/admin/usernameExists/\"+username).toPromise().then((res:any)=>{\n      console.log(res);\n      });\n  }\n\n\n  public async checkUserPassword(password:String,userName:String):Promise<String>{\n    return await this.http.get(\"http://localhost:8080/apis/users/username/\"+userName).toPromise().then((res:any)=>{\n        console.log(res);\n       this.userid = res.customer['customerId'];\n        return JSON.stringify(res.customer['password']);\n    });\n  }\n\n  public async checkBankerPassword(password:String,userName:String):Promise<String>{\n    return await this.http.get(\"http://localhost:8080/apis/admin/\"+userName).toPromise().then((res:any)=>{\n      console.log(res);\n      return JSON.stringify(res.banker['password'])\n    });\n  }\n/*\n  public  saveUser(User:any){\n    console.log(\"POST CALL\")\n    console.log(User)\n    return  this.http.post(\"http://localhost:8080/apis/users\",User);\n  }\n  */\n  public saveUser(User:any){\n    const httpOptions = {\n      headers: new HttpHeaders({'Content-type':'application/json'})\n    }\n      this.http.post(\"http://localhost:8080/apis/users\", User,httpOptions).toPromise().then((res:any)=>{\n           this.customerIdResponse = res.customer['customerId'];\n           this.addressIdResponse = res.customer['addressId'];\n           this.firstName=res.customer['firstName'];\n           this.lastName=res.customer['lastName'];\n          this.dateOfBirth=res.customer['dateOfBirth'];\n          this.maritalStatus=res.customer['maritalStatus'];\n          this.ssnNumber=res.customer['ssnNumber'];\n      });\n\n  } \n    \n    public saveBanker(User:any){\n      const httpOptions={\n        headers:new HttpHeaders({\n          'Content-type':'application/json'\n        })\n      }\n      this.http.post(\"http://localhost:8080/apis/admin\",User,httpOptions).toPromise();\n    } \n\n   /* public async submitApplication(ApplicationUser:any,AddressUser:any,loanUser:any){\n      const httpOptions={\n        headers:new HttpHeaders({\n          'Content-type':'application/json'\n        })\n      }\n      //this.http.post(\"http://localhost:8080/apis/application\",loanUser,httpOptions).toPromise();\n      await this.http.post(\"http://localhost:8080/apis/address\",AddressUser,httpOptions).toPromise().then((res:any)=>{\n        \n      });\n      this.http.post(\"http://localhost:8080/apis/users\",ApplicationUser,httpOptions).toPromise();\n } */\n\n  //with customer id\n  public async userApplications(id:Number) : Promise<any>{\n    return await this.http.get(\"http://localhost:8080/apis/application/userId/\"+id).toPromise().then((res:any)=>{\n      return res.applications;\n    }\n    );\n\n    \n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}